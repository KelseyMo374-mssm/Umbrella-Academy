---
title: "Making (Nice!) Plots in R"
subtitle: "An R exercise within the Umbrella Academy course"
description: "This is an exercise to help 'wet lab' scientists feel comfortable manipulating data and creating common charts in R"

author:
  - name: Kelsey Monson
    degrees:
      - PhD
      - MS
    orcid: 0000-0003-1093-8628
    email: kelsey.monson@mssm.edu
    affiliations:
      - ref: ISMMS

affiliations:
  - id: ISMMS
    name: Icahn School of Medicine at Mount Sinai
    city: New York
    state: NY
    department: Immunology and Immunotherapy

title-block-banner: "#f0f3f5"
title-block-banner-color: "black"

keywords: "R, Data Analysis, Data Viz"
date: today

format: 
  html: 
    toc: true
    number-sections: true
    css: style.css
    
fig-cap-location: margin
editor: visual
---

## Introduction

The goal of **The Umbrella Academy** is to familiarize "wet lab" scientists with useful "dry lab" tools. Therefore, this exercise is geared primarily towards basic data manipulation to generate aesthetically pleasing plots in R.

R is an excellent tool for generating beautiful data visualizations, and is much more flexible and customizable than other tools like Excel or GraphPad.

Another major benefit of R is that it is, and (hopefully) always will be, free to use and open source, unlike other proprietary statistical computing software like SAS or STATA.

But first, before we dive into the exercise itself, let's familiarize ourselves with some basics of working with R in RStudio.

### R and RStudio

By now, you should have installed what's often called **"Base-R."**

**What is R?**

According to its creators,

> R is "a language and environment for statistical computing and graphics" and "an integrated suite of software facilities for data manipulation, calculation and graphical display."

(You can read more about it [here](https://www.r-project.org/about.html).)

But what does that mean in practice?

You might have run R after you installed it, and seen something like this, magically transporting yourself to circa 2004: ![Base RGui screenshot](assets/RGui.png)

This is "Base-R," and it's not especially user-friendly (where are you even supposed to start? how do you run a command?). While it's perfectly functional, it's not the ideal way to interact with R.

Enter: **RStudio**.

I'm writing this exercise in RStudio right now, see? ![RStudio screenshot](assets/RStudio.png)

To be honest, I've been coding in R since 2017 and have never once written a script or performed an analysis in Base-R.

Maybe you can see why -- RStudio is what's called an **"integrative development environment" (IDE).**

This goes beyond even a "graphical user interface" (GUI), in that it provides tools to write, execute, and debug R code, manage the objects and variables you create, keep track of your files and projects, render plots, read help documentation... the list goes on.

So let's dive in.

### Navigating RStudio

Remember in our [last lesson](../Command-Line/Command_Line_Exercise.md) when we learned the command `pwd` to see what directory we were in on the HPC?

There is a similar command in R:

```{r}
getwd()
```

You can see I'm currently in my project directory on the Zamarin Lab computer.

The syntax for commands in R is typically the `function` followed by the arguments to the function in parentheses `(arguments)`.

With `getwd()`, we're asking the question of what directory we're in, so we aren't giving it any arguments. But if we want to *change* the directory, we can use the below command, giving it the path of the directory we want to move to:

```{r}
setwd("C:/Users/Zamarin Lab/Documents/GitHub/Umbrella-Academy/R-Project")
```

::: callout-note
`getwd()` is short for "**get** working directory" (whereas `pwd` was "**print** working directory").

`setwd()` is short for "**set** working directory."

You can remember these since "set" and "get" rhyme!
:::
